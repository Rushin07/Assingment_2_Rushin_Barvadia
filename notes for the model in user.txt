notes for the models of the user
let mongoose = require('mongoose');
let crypto = require('crypto');

// Create a model class
let UserSchema = mongoose.Schema(
    {
        firstName: String,
        lastName: String,
        email: {
            type: String,
            match: [/.+\@.+\..+/, "please fill in a valid e-mail address"]
        },
        //make a unique username
        username: {
            type: String,
            unique: true,
            required: 'Username is required'
        },
        //custom stone validator
        password: {
            type: String,
            validate: [(password) => {
                //will check if it is true or false
                return password && password.length > 6;
            }, "password should be longer"]
        },
        created: {
            type: Date,
            default: Date.now
        }
    },
    {
        //bacically table name
        collection: "user"
    }
);

// Virtual attribute to split the names
UserSchema.virtual('fullname')
    .get(function () {
        return this.firstName + ' ' + this.lastName;
    })
    .set(function () {
        let splitName = fullName.split('.');
        this.firstName = splitName[0] || '';
        this.lastName = splitName[1] || '';
    });

//This is a Middleware
//before the given action is pre
// salt is a attribute used to create encryption when two same password 
//--> of differnt user can be stored using salt
//Middleware pre
UserSchema.pre('save', function (next) {
    if (this.password) {
        this.salt = Buffer.from(crypto.randomBytes(16).toString('base64'), 'base64');
        this.password = this.hashPassword(this.password);
    }
    next();
})

//Middleware post
//passes the value of pre here?
UserSchema.post('save', function (next) {
    console.log('The user "' + this.username + '" details were saved.');
});

UserSchema.methods.hashPassword = function (password) {
    return crypto.pbkdf2Sync(password, this.salt, 10000, 64, 'sha512').toString('base64');
};

UserSchema.methods.authenticate = function (password) {
    return this.password === this.hashPassword(password);
};


module.exports = mongoose.model('user', UserSchema);